#import <Foundation/Foundation.h>
#import "ASPWorkbookResponse.h"
#import "ASPSaveResponse.h"
#import "ASPSavingSaveOptions.h"
#import "ASPBaseResponse.h"
#import "ASPAutoFitterOptions.h"
#import "ASPStyleResponse.h"
#import "ASPCellsDocumentPropertiesResponse.h"
#import "ASPCellsDocumentPropertyResponse.h"
#import "ASPCellsDocumentProperty.h"
#import "ASPWorkbookEncryptionRequest.h"
#import "ASPTextItemsResponse.h"
#import "ASPImportDataImportOption.h"
#import "ASPNamesResponse.h"
#import "ASPNameResponse.h"
#import "ASPWorkbookProtectionRequest.h"
#import "ASPWorkbookReplaceResponse.h"
#import "ASPWorkbookSettingsResponse.h"
#import "ASPWorkbookSettings.h"
#import "ASPSplitResultResponse.h"
#import "ASPWorksheetsResponse.h"
#import "ASPWorksheetResponse.h"
#import "ASPWorksheet.h"
#import "ASPAutoShapesResponse.h"
#import "ASPAutoShapeResponse.h"
#import "ASPCellsResponse.h"
#import "ASPColumnsResponse.h"
#import "ASPColumnResponse.h"
#import "ASPStyle.h"
#import "ASPRowsResponse.h"
#import "ASPRowResponse.h"
#import "ASPCellResponse.h"
#import "ASPChartsResponse.h"
#import "ASPChartAreaResponse.h"
#import "ASPLineResponse.h"
#import "ASPFillFormatResponse.h"
#import "ASPLegendResponse.h"
#import "ASPChartsLegend.h"
#import "ASPTitleResponse.h"
#import "ASPChartsTitle.h"
#import "ASPSystemObject.h"
#import "ASPCommentsResponse.h"
#import "ASPCommentResponse.h"
#import "ASPComment.h"
#import "ASPSingleValueResponse.h"
#import "ASPHyperlinksResponse.h"
#import "ASPHyperlinkResponse.h"
#import "ASPHyperlink.h"
#import "ASPMergedCellsResponse.h"
#import "ASPMergedCellResponse.h"
#import "ASPOleObjectsResponse.h"
#import "ASPDrawingOleObject.h"
#import "ASPOleObjectResponse.h"
#import "ASPPicturesResponse.h"
#import "ASPPictureResponse.h"
#import "ASPDrawingPicture.h"
#import "ASPBarcodeResponseList.h"
#import "ASPPivotTablesResponse.h"
#import "ASPPivotTableResponse.h"
#import "ASPCreatePivotTableRequest.h"
#import "ASPPivotTableFieldRequest.h"
#import "ASPPivotFieldResponse.h"
#import "ASPWorksheetMovingRequest.h"
#import "ASPProtectSheetParameter.h"
#import "ASPWorksheetReplaceResponse.h"
#import "ASPDataSorter.h"
#import "ASPValidationsResponse.h"
#import "ASPValidationResponse.h"
#import "ASPPasswordRequest.h"
#import "ASPObject.h"
#import "ASPApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPCellsApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPCellsApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;



///
///
/// Convert workbook from request content to some format.
/// 
///
/// @param file 
/// @param format The format to convert.
/// @param password The workbook password.
/// @param outPath Path to save result
/// 
///
/// @return NSURL*
-(NSNumber*) putConvertWorkBookWithCompletionBlock :(NSURL*) file 
     format:(NSString*) format 
     password:(NSString*) password 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Convert Excel Workbook to Different File Formats.
///
///
/// @param name The document name.
/// @param format Convert the document to this format.
/// @param outPath Save converted file with this name.
/// @param password The document password.
/// @param isAutoFit Set document rows to be autofit.
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return ASPWorkbookResponse*
-(NSNumber*) getWorkBookWithFormatWithCompletionBlock :(NSString*) name
                                                format:(NSString*) format
                                               outPath:(NSString*) outPath
                                              password:(NSString*) password
                                             isAutoFit:(NSNumber*) isAutoFit
                                               storage:(NSString*) storage 
                                                folder:(NSString*) folder 

                                     completionHandler: (void (^)(ASPWorkbookResponse* output, NSError* error))completionBlock;



///
///
/// Read workbook info or export.
/// 
///
/// @param name The document name.
/// @param password The document password.
/// @param isAutoFit Set document rows to be autofit.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPWorkbookResponse*
-(NSNumber*) getWorkBookWithCompletionBlock :(NSString*) name 
     password:(NSString*) password 
     isAutoFit:(NSNumber*) isAutoFit 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorkbookResponse* output, NSError* error))completionBlock;
    


///
///
/// Create new workbook using different methods.
/// 
///
/// @param name The new document name.
/// @param templateFile The template file, if the data not provided default workbook is created.
/// @param dataFile Smart marker data file, if the data not provided the request content is checked for the data.
/// @param storage The document storage.
/// @param folder The new document folder.
/// 
///
/// @return ASPWorkbookResponse*
-(NSNumber*) putWorkbookCreateWithCompletionBlock :(NSString*) name 
     templateFile:(NSString*) templateFile 
     dataFile:(NSString*) dataFile 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorkbookResponse* output, NSError* error))completionBlock;
    


///
///
/// Convert document and save result to storage.
/// 
///
/// @param name The document name.
/// @param saveOptions Save options.
/// @param newfilename The new file name.
/// @param isAutoFitRows Autofit rows.
/// @param isAutoFitColumns Autofit columns.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSaveResponse*
-(NSNumber*) postDocumentSaveAsWithCompletionBlock :(NSString*) name 
     saveOptions:(ASPSavingSaveOptions*) saveOptions 
     newfilename:(NSString*) newfilename 
     isAutoFitRows:(NSNumber*) isAutoFitRows 
     isAutoFitColumns:(NSNumber*) isAutoFitColumns 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSaveResponse* output, NSError* error))completionBlock;
    


///
///
/// Autofit workbook rows.
/// 
///
/// @param name Document name.
/// @param autoFitterOptions Auto Fitter Options.
/// @param startRow Start row.
/// @param endRow End row.
/// @param onlyAuto Only auto.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postAutofitWorkbookRowsWithCompletionBlock :(NSString*) name 
     autoFitterOptions:(ASPAutoFitterOptions*) autoFitterOptions 
     startRow:(NSNumber*) startRow 
     endRow:(NSNumber*) endRow 
     onlyAuto:(NSNumber*) onlyAuto 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Calculate all formulas in workbook.
/// 
///
/// @param name Document name.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorkbookCalculateFormulaWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read workbook default style info.
/// 
///
/// @param name The workbook name.
/// @param storage The document storage.
/// @param folder The document&#39;s folder.
/// 
///
/// @return ASPStyleResponse*
-(NSNumber*) getWorkBookDefaultStyleWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPStyleResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document properties.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellsDocumentPropertiesResponse*
-(NSNumber*) getDocumentPropertiesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete all custom document properties and clean built-in ones.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellsDocumentPropertiesResponse*
-(NSNumber*) deleteDocumentPropertiesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document property by name.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellsDocumentPropertyResponse*
-(NSNumber*) getDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Set/create document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param _property {CellsDocumentProperty} with new property value.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellsDocumentPropertyResponse*
-(NSNumber*) putDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     _property:(ASPCellsDocumentProperty*) _property 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellsDocumentPropertiesResponse*
-(NSNumber*) deleteDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Encript document.
/// 
///
/// @param name The document name.
/// @param encryption Encryption parameters.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postEncryptDocumentWithCompletionBlock :(NSString*) name 
     encryption:(ASPWorkbookEncryptionRequest*) encryption 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Decrypt document.
/// 
///
/// @param name The document name.
/// @param encryption Encryption settings, only password can be specified.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteDecryptDocumentWithCompletionBlock :(NSString*) name 
     encryption:(ASPWorkbookEncryptionRequest*) encryption 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Search text.
/// 
///
/// @param name Document name.
/// @param text Text sample.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) postWorkbooksTextSearchWithCompletionBlock :(NSString*) name 
     text:(NSString*) text 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Import data to workbook.
/// 
///
/// @param name The workbook name.
/// @param importOption The import option.
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postImportDataWithCompletionBlock :(NSString*) name 
     importOption:(ASPImportDataImportOption*) importOption 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Merge workbooks.
/// 
///
/// @param name Workbook name.
/// @param mergeWith The workbook to merge with.
/// @param storage The document storage.
/// @param folder Source workbook folder.
/// 
///
/// @return ASPWorkbookResponse*
-(NSNumber*) postWorkbooksMergeWithCompletionBlock :(NSString*) name 
     mergeWith:(NSString*) mergeWith 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorkbookResponse* output, NSError* error))completionBlock;
    


///
///
/// Read workbook's names.
/// 
///
/// @param name The workbook name.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPNamesResponse*
-(NSNumber*) getWorkBookNamesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPNamesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read workbook's name.
/// 
///
/// @param name The workbook name.
/// @param nameName The name.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPNameResponse*
-(NSNumber*) getWorkBookNameWithCompletionBlock :(NSString*) name 
     nameName:(NSString*) nameName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPNameResponse* output, NSError* error))completionBlock;
    


///
///
/// Protect document.
/// 
///
/// @param name The document name.
/// @param protection The protection settings.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postProtectDocumentWithCompletionBlock :(NSString*) name 
     protection:(ASPWorkbookProtectionRequest*) protection 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unprotect document.
/// 
///
/// @param name The document name.
/// @param protection Protection settings, only password can be specified.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteUnProtectDocumentWithCompletionBlock :(NSString*) name 
     protection:(ASPWorkbookProtectionRequest*) protection 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Replace text.
/// 
///
/// @param name Document name.
/// @param oldValue The old value.
/// @param newValue The new value.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPWorkbookReplaceResponse*
-(NSNumber*) postWorkbooksTextReplaceWithCompletionBlock :(NSString*) name 
     oldValue:(NSString*) oldValue 
     newValue:(NSString*) newValue 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorkbookReplaceResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param storage 
/// @param folder 
/// 
///
/// @return ASPWorkbookSettingsResponse*
-(NSNumber*) getWorkbookSettingsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorkbookSettingsResponse* output, NSError* error))completionBlock;
    


///
///
/// 
/// 
///
/// @param name 
/// @param storage 
/// @param folder 
/// @param settings 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorkbookSettingsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     settings:(ASPWorkbookSettings*) settings 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Smart marker processing result.
/// 
///
/// @param name The workbook name.
/// @param file 
/// @param xmlFile The xml file full path, if empty the data is read from request body.
/// @param storage The document storage.
/// @param folder The workbook folder full path.
/// @param outPath Path to save result
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorkbookGetSmartMarkerResultWithCompletionBlock :(NSString*) name 
     file:(NSURL*) file 
     xmlFile:(NSString*) xmlFile 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     outPath:(NSString*) outPath 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Split workbook.
/// 
///
/// @param name The workbook name.
/// @param format Split format.
/// @param from Start worksheet index.
/// @param to End worksheet index.
/// @param horizontalResolution Image horizontal resolution.
/// @param verticalResolution Image vertical resolution.
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPSplitResultResponse*
-(NSNumber*) postWorkbookSplitWithCompletionBlock :(NSString*) name 
     format:(NSString*) format 
     from:(NSNumber*) from 
     to:(NSNumber*) to 
     horizontalResolution:(NSNumber*) horizontalResolution 
     verticalResolution:(NSNumber*) verticalResolution 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSplitResultResponse* output, NSError* error))completionBlock;
    


///
///
/// Read workbook's text items.
/// 
///
/// @param name The workbook name.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) getWorkBookTextItemsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheets info.
/// 
///
/// @param name Document name.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPWorksheetsResponse*
-(NSNumber*) getWorkSheetsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet in specified format
///
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param format Worksheet format
/// @param verticalResolution Image vertical resolution.
/// @param horizontalResolution Image horizontal resolution.
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getWorkSheetWithFormatWithCompletionBlock :(NSString*) name
                                              sheetName:(NSString*) sheetName
                                                 format:(NSString*) format
                                     verticalResolution:(NSNumber*) verticalResolution
                                   horizontalResolution:(NSNumber*) horizontalResolution
                                                storage:(NSString*) storage
                                                 folder:(NSString*) folder 

                                      completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Read worksheet info or export.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param verticalResolution Image vertical resolution.
/// @param horizontalResolution Image horizontal resolution.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPWorksheetResponse*
-(NSNumber*) getWorkSheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     verticalResolution:(NSNumber*) verticalResolution 
     horizontalResolution:(NSNumber*) horizontalResolution 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetResponse* output, NSError* error))completionBlock;
    


///
///
/// Add new worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The new sheet name.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPWorksheetsResponse*
-(NSNumber*) putAddNewWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetsResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet property
/// 
///
/// @param name 
/// @param sheetName 
/// @param sheet 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPWorksheetResponse*
-(NSNumber*) postUpdateWorksheetPropertyWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     sheet:(ASPWorksheet*) sheet 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPWorksheetResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPWorksheetsResponse*
-(NSNumber*) deleteWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetsResponse* output, NSError* error))completionBlock;
    


///
///
/// Autofit worksheet rows.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param autoFitterOptions Auto Fitter Options.
/// @param startRow Start row.
/// @param endRow End row.
/// @param onlyAuto Only auto.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postAutofitWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     autoFitterOptions:(ASPAutoFitterOptions*) autoFitterOptions 
     startRow:(NSNumber*) startRow 
     endRow:(NSNumber*) endRow 
     onlyAuto:(NSNumber*) onlyAuto 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet autoshapes info.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPAutoShapesResponse*
-(NSNumber*) getWorksheetAutoshapesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAutoShapesResponse* output, NSError* error))completionBlock;
    


///
///
/// Get autoshape info.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param autoshapeNumber The autoshape number.
/// @param storage Workbook storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAutoShapeResponse*
-(NSNumber*) getWorksheetAutoshapeWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     autoshapeNumber:(NSNumber*) autoshapeNumber 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAutoShapeResponse* output, NSError* error))completionBlock;



///
///
/// Convert autoshape to Different File Formats.
///
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param autoshapeNumber The autoshape number.
/// @param format Convert autoshape to this format
/// @param storage Workbook storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getWorksheetAutoshapeWithFormatWithCompletionBlock :(NSString*) name
                                                       sheetName:(NSString*) sheetName
                                                 autoshapeNumber:(NSNumber*) autoshapeNumber
                                                          format:(NSString*) format
                                                         storage:(NSString*) storage
                                                          folder:(NSString*) folder 

                                               completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Set worksheet background image.
/// 
///
/// @param name 
/// @param sheetName 
/// @param backgroundImage 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putWorkSheetBackgroundWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     backgroundImage:(NSURL*) backgroundImage 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Set worksheet background image.
/// 
///
/// @param name 
/// @param sheetName 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorkSheetBackgroundWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get cells info.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param offest Begginig offset.
/// @param count Maximum amount of cells in the response.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder name.
/// 
///
/// @return ASPCellsResponse*
-(NSNumber*) getWorksheetCellsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     offest:(NSNumber*) offest 
     count:(NSNumber*) count 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellsResponse* output, NSError* error))completionBlock;
    


///
///
/// Set cell range value
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param cellarea Cell area (like \&quot;A1:C2\&quot;)
/// @param value Range value
/// @param type Value data type (like \&quot;int\&quot;)
/// @param storage Storage name
/// @param folder Folder name
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postSetCellRangeValueWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellarea:(NSString*) cellarea 
     value:(NSString*) value 
     type:(NSString*) type 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Clear cells contents.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param range The range.
/// @param startRow The start row.
/// @param startColumn The start column.
/// @param endRow The end row.
/// @param endColumn The end column.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postClearContentsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     range:(NSString*) range 
     startRow:(NSNumber*) startRow 
     startColumn:(NSNumber*) startColumn 
     endRow:(NSNumber*) endRow 
     endColumn:(NSNumber*) endColumn 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Clear cells contents.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param range The range.
/// @param startRow The start row.
/// @param startColumn The start column.
/// @param endRow The end row.
/// @param endColumn The end column.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postClearFormatsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     range:(NSString*) range 
     startRow:(NSNumber*) startRow 
     startColumn:(NSNumber*) startColumn 
     endRow:(NSNumber*) endRow 
     endColumn:(NSNumber*) endColumn 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet columns info.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder The workdook folder.
/// 
///
/// @return ASPColumnsResponse*
-(NSNumber*) getWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPColumnsResponse* output, NSError* error))completionBlock;
    


///
///
/// Copy worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param sourceColumnIndex Source column index
/// @param destinationColumnIndex Destination column index
/// @param columnNumber The copied column number
/// @param worksheet The Worksheet
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postCopyWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     sourceColumnIndex:(NSNumber*) sourceColumnIndex 
     destinationColumnIndex:(NSNumber*) destinationColumnIndex 
     columnNumber:(NSNumber*) columnNumber 
     worksheet:(NSString*) worksheet 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Group worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param firstIndex The first column index to be operated.
/// @param lastIndex The last column index to be operated.
/// @param hide columns visible state
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postGroupWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     firstIndex:(NSNumber*) firstIndex 
     lastIndex:(NSNumber*) lastIndex 
     hide:(NSNumber*) hide 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Hide worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startColumn The begin column index to be operated.
/// @param totalColumns Number of columns to be operated.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postHideWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startColumn:(NSNumber*) startColumn 
     totalColumns:(NSNumber*) totalColumns 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Ungroup worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param firstIndex The first column index to be operated.
/// @param lastIndex The last column index to be operated.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUngroupWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     firstIndex:(NSNumber*) firstIndex 
     lastIndex:(NSNumber*) lastIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unhide worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startcolumn The begin column index to be operated.
/// @param totalColumns Number of columns to be operated.
/// @param width The new column width.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUnhideWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startcolumn:(NSNumber*) startcolumn 
     totalColumns:(NSNumber*) totalColumns 
     width:(NSNumber*) width 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet column data by column's index.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param columnIndex The column index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPColumnResponse*
-(NSNumber*) getWorksheetColumnWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     columnIndex:(NSNumber*) columnIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPColumnResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param columnIndex The column index.
/// @param columns The columns.
/// @param updateReference The update reference.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPColumnsResponse*
-(NSNumber*) putInsertWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     columnIndex:(NSNumber*) columnIndex 
     columns:(NSNumber*) columns 
     updateReference:(NSNumber*) updateReference 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPColumnsResponse* output, NSError* error))completionBlock;
    


///
///
/// Set worksheet column width.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param columnIndex The column index.
/// @param width The width.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPColumnResponse*
-(NSNumber*) postSetWorksheetColumnWidthWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     columnIndex:(NSNumber*) columnIndex 
     width:(NSNumber*) width 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPColumnResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet columns.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param columnIndex The column index.
/// @param columns The columns.
/// @param updateReference The update reference.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPColumnsResponse*
-(NSNumber*) deleteWorksheetColumnsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     columnIndex:(NSNumber*) columnIndex 
     columns:(NSNumber*) columns 
     updateReference:(NSNumber*) updateReference 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPColumnsResponse* output, NSError* error))completionBlock;
    


///
///
/// Set column style
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param columnIndex The column index.
/// @param style Style dto
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postColumnStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     columnIndex:(NSNumber*) columnIndex 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Merge cells.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startRow The start row.
/// @param startColumn The start column.
/// @param totalRows The total rows
/// @param totalColumns The total columns.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorksheetMergeWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startRow:(NSNumber*) startRow 
     startColumn:(NSNumber*) startColumn 
     totalRows:(NSNumber*) totalRows 
     totalColumns:(NSNumber*) totalColumns 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet rows info.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder The workdook folder.
/// 
///
/// @return ASPRowsResponse*
-(NSNumber*) getWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRowsResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert several new worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startrow The begin row index to be operated.
/// @param totalRows Number of rows to be operated.
/// @param updateReference Indicates if update references in other worksheets.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putInsertWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startrow:(NSNumber*) startrow 
     totalRows:(NSNumber*) totalRows 
     updateReference:(NSNumber*) updateReference 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete several worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet bame.
/// @param startrow The begin row index to be operated.
/// @param totalRows Number of rows to be operated.
/// @param updateReference Indicates if update references in other worksheets.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startrow:(NSNumber*) startrow 
     totalRows:(NSNumber*) totalRows 
     updateReference:(NSNumber*) updateReference 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Copy worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param sourceRowIndex Source row index
/// @param destinationRowIndex Destination row index
/// @param rowNumber The copied row number
/// @param worksheet worksheet
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postCopyWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     sourceRowIndex:(NSNumber*) sourceRowIndex 
     destinationRowIndex:(NSNumber*) destinationRowIndex 
     rowNumber:(NSNumber*) rowNumber 
     worksheet:(NSString*) worksheet 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Group worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param firstIndex The first row index to be operated.
/// @param lastIndex The last row index to be operated.
/// @param hide rows visible state
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postGroupWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     firstIndex:(NSNumber*) firstIndex 
     lastIndex:(NSNumber*) lastIndex 
     hide:(NSNumber*) hide 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Hide worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startrow The begin row index to be operated.
/// @param totalRows Number of rows to be operated.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postHideWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startrow:(NSNumber*) startrow 
     totalRows:(NSNumber*) totalRows 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Ungroup worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param firstIndex The first row index to be operated.
/// @param lastIndex The last row index to be operated.
/// @param isAll Is all row to be operated
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUngroupWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     firstIndex:(NSNumber*) firstIndex 
     lastIndex:(NSNumber*) lastIndex 
     isAll:(NSNumber*) isAll 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unhide worksheet rows.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startrow The begin row index to be operated.
/// @param totalRows Number of rows to be operated.
/// @param height The new row height.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUnhideWorksheetRowsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startrow:(NSNumber*) startrow 
     totalRows:(NSNumber*) totalRows 
     height:(NSNumber*) height 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet row data by row's index.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param rowIndex The row index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPRowResponse*
-(NSNumber*) getWorksheetRowWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     rowIndex:(NSNumber*) rowIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRowResponse* output, NSError* error))completionBlock;
    


///
///
/// Insert new worksheet row.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param rowIndex The new row index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRowResponse*
-(NSNumber*) putInsertWorksheetRowWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     rowIndex:(NSNumber*) rowIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRowResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet row.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param rowIndex The row index.
/// @param height The new row height.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRowResponse*
-(NSNumber*) postUpdateWorksheetRowWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     rowIndex:(NSNumber*) rowIndex 
     height:(NSNumber*) height 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRowResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet row.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet bame.
/// @param rowIndex The row index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetRowWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     rowIndex:(NSNumber*) rowIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Set row style.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param rowIndex The row index.
/// @param style Style dto
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postRowStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     rowIndex:(NSNumber*) rowIndex 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update cell's range style.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param range The range.
/// @param style {Style} with update style settings.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUpdateWorksheetRangeStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     range:(NSString*) range 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unmerge cells.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param startRow The start row.
/// @param startColumn The start column.
/// @param totalRows The total rows
/// @param totalColumns The total columns.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorksheetUnmergeWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     startRow:(NSNumber*) startRow 
     startColumn:(NSNumber*) startColumn 
     totalRows:(NSNumber*) totalRows 
     totalColumns:(NSNumber*) totalColumns 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Set cell value.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param cellName The cell name.
/// @param value The cell value.
/// @param type The value type.
/// @param formula Formula for cell
/// @param storage Workbook storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCellResponse*
-(NSNumber*) postWorksheetCellSetValueWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     value:(NSString*) value 
     type:(NSString*) type 
     formula:(NSString*) formula 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellResponse* output, NSError* error))completionBlock;
    


///
///
/// Set htmlstring value into cell
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param cellName The cell name.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPCellResponse*
-(NSNumber*) postSetCellHtmlStringWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellResponse* output, NSError* error))completionBlock;
    


///
///
/// Read cell's style info.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param cellName Cell&#39;s name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPStyleResponse*
-(NSNumber*) getWorksheetCellStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPStyleResponse* output, NSError* error))completionBlock;
    


///
///
/// Update cell's style.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param cellName The cell name.
/// @param style {Style} with update style settings.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPStyleResponse*
-(NSNumber*) postUpdateWorksheetCellStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPStyleResponse* output, NSError* error))completionBlock;
    


///
///
/// Read cell data by cell's name.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param cellOrMethodName The cell&#39;s or method name. (Method name like firstcell, endcell etc.)
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPCellResponse*
-(NSNumber*) getWorksheetCellWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellOrMethodName:(NSString*) cellOrMethodName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCellResponse* output, NSError* error))completionBlock;
    


///
///
/// Copy cell into cell
/// 
///
/// @param name Workbook name.
/// @param destCellName Destination cell name
/// @param sheetName Destination worksheet name.
/// @param worksheet Source worksheet name.
/// @param cellname Source cell name
/// @param row Source row
/// @param column Source column
/// @param storage Storage name
/// @param folder Folder name
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postCopyCellIntoCellWithCompletionBlock :(NSString*) name 
     destCellName:(NSString*) destCellName 
     sheetName:(NSString*) sheetName 
     worksheet:(NSString*) worksheet 
     cellname:(NSString*) cellname 
     row:(NSNumber*) row 
     column:(NSNumber*) column 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet charts info.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPChartsResponse*
-(NSNumber*) getWorksheetChartsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPChartsResponse* output, NSError* error))completionBlock;
    


///
///
/// Add new chart to worksheet.
/// 
///
/// @param name Workbook name.
/// @param sheetName The worksheet name.
/// @param chartType Chart type, please refer property Type in chart resource.
/// @param upperLeftRow New chart upper left row.
/// @param upperLeftColumn New chart upperleft column.
/// @param lowerRightRow New chart lower right row.
/// @param lowerRightColumn New chart lower right column.
/// @param area Specifies values from which to plot the data series.
/// @param isVertical Specifies whether to plot the series from a range of cell values by row or by column.
/// @param categoryData Gets or sets the range of category Axis values. It can be a range of cells (such as, \&quot;d1:e10\&quot;).
/// @param isAutoGetSerialName Specifies whether auto update serial name.
/// @param title Specifies chart title name.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPChartsResponse*
-(NSNumber*) putWorksheetAddChartWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartType:(NSString*) chartType 
     upperLeftRow:(NSNumber*) upperLeftRow 
     upperLeftColumn:(NSNumber*) upperLeftColumn 
     lowerRightRow:(NSNumber*) lowerRightRow 
     lowerRightColumn:(NSNumber*) lowerRightColumn 
     area:(NSString*) area 
     isVertical:(NSNumber*) isVertical 
     categoryData:(NSString*) categoryData 
     isAutoGetSerialName:(NSNumber*) isAutoGetSerialName 
     title:(NSString*) title 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPChartsResponse* output, NSError* error))completionBlock;
    


///
///
/// Clear the charts.
/// 
///
/// @param name Workbook name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetClearChartsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet chart by index.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPChartsResponse*
-(NSNumber*) deleteWorksheetDeleteChartWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPChartsResponse* output, NSError* error))completionBlock;
    


///
///
/// Get chart area info.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder Workbook folder.
/// 
///
/// @return ASPChartAreaResponse*
-(NSNumber*) getChartAreaWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPChartAreaResponse* output, NSError* error))completionBlock;
    


///
///
/// Get chart area border info.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder Workbook folder.
/// 
///
/// @return ASPLineResponse*
-(NSNumber*) getChartAreaBorderWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPLineResponse* output, NSError* error))completionBlock;
    


///
///
/// Get chart area fill format info.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder Workbook folder.
/// 
///
/// @return ASPFillFormatResponse*
-(NSNumber*) getChartAreaFillFormatWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPFillFormatResponse* output, NSError* error))completionBlock;
    


///
///
/// Get chart legend
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPLegendResponse*
-(NSNumber*) getWorksheetChartLegendWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPLegendResponse* output, NSError* error))completionBlock;
    


///
///
/// Show legend in chart
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putWorksheetChartLegendWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update chart legend
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param legend 
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPLegendResponse*
-(NSNumber*) postWorksheetChartLegendWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     legend:(ASPChartsLegend*) legend 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPLegendResponse* output, NSError* error))completionBlock;
    


///
///
/// Hide legend in chart
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetChartLegendWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Add chart title / Set chart title visible
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param title Chart title.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPTitleResponse*
-(NSNumber*) putWorksheetChartTitleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     title:(ASPChartsTitle*) title 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTitleResponse* output, NSError* error))completionBlock;
    


///
///
/// Update chart title
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param title Chart title
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPTitleResponse*
-(NSNumber*) postWorksheetChartTitleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     title:(ASPChartsTitle*) title 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTitleResponse* output, NSError* error))completionBlock;
    


///
///
/// Hide title in chart
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param chartIndex The chart index.
/// @param storage Workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetChartTitleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartIndex:(NSNumber*) chartIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get chart in specified format.
///
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param chartNumber The chart number.
/// @param format Chart format
/// @param storage Workbook storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getWorksheetChartWithFormatWithCompletionBlock :(NSString*) name
                                                   sheetName:(NSString*) sheetName
                                                 chartNumber:(NSNumber*) chartNumber
                                                      format:(NSString*) format
                                                     storage:(NSString*) storage
                                                      folder:(NSString*) folder 

                                           completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Get chart info.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param chartNumber The chart number.
/// @param storage Workbook storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSystemObject*
-(NSNumber*) getWorksheetChartWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     chartNumber:(NSNumber*) chartNumber 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet comments.
/// 
///
/// @param name Workbook name.
/// @param sheetName The worksheet name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentsResponse*
-(NSNumber*) getWorkSheetCommentsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentsResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet comment by cell name.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param cellName The cell name
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentResponse*
-(NSNumber*) getWorkSheetCommentWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentResponse* output, NSError* error))completionBlock;
    


///
///
/// Add worksheet's cell comment.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param cellName The cell name
/// @param comment Comment object
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCommentResponse*
-(NSNumber*) putWorkSheetCommentWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     comment:(ASPComment*) comment 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCommentResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet's cell comment.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param cellName The cell name
/// @param comment Comment object
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorkSheetCommentWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     comment:(ASPComment*) comment 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet's cell comment.
/// 
///
/// @param name The document name.
/// @param sheetName The worksheet name.
/// @param cellName The cell name
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorkSheetCommentWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellName:(NSString*) cellName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Copy worksheet
/// 
///
/// @param name 
/// @param sheetName 
/// @param sourceSheet 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postCopyWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     sourceSheet:(NSString*) sourceSheet 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Search text.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param text Text to search.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) postWorkSheetTextSearchWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     text:(NSString*) text 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Calculate formula value.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param formula The formula.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPSingleValueResponse*
-(NSNumber*) getWorkSheetCalculateFormulaWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     formula:(NSString*) formula 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPSingleValueResponse* output, NSError* error))completionBlock;
    


///
///
/// Set freeze panes
/// 
///
/// @param name 
/// @param sheetName 
/// @param row 
/// @param column 
/// @param freezedRows 
/// @param freezedColumns 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putWorksheetFreezePanesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     row:(NSNumber*) row 
     column:(NSNumber*) column 
     freezedRows:(NSNumber*) freezedRows 
     freezedColumns:(NSNumber*) freezedColumns 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unfreeze panes
/// 
///
/// @param name 
/// @param sheetName 
/// @param row 
/// @param column 
/// @param freezedRows 
/// @param freezedColumns 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetFreezePanesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     row:(NSNumber*) row 
     column:(NSNumber*) column 
     freezedRows:(NSNumber*) freezedRows 
     freezedColumns:(NSNumber*) freezedColumns 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet hyperlinks.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPHyperlinksResponse*
-(NSNumber*) getWorkSheetHyperlinksWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinksResponse* output, NSError* error))completionBlock;
    


///
///
/// Add worksheet hyperlink.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param firstRow 
/// @param firstColumn 
/// @param totalRows 
/// @param totalColumns 
/// @param address 
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPHyperlinkResponse*
-(NSNumber*) putWorkSheetHyperlinkWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     firstRow:(NSNumber*) firstRow 
     firstColumn:(NSNumber*) firstColumn 
     totalRows:(NSNumber*) totalRows 
     totalColumns:(NSNumber*) totalColumns 
     address:(NSString*) address 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinkResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete all hyperlinks in worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorkSheetHyperlinksWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet hyperlink by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param hyperlinkIndex The hyperlink&#39;s index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPHyperlinkResponse*
-(NSNumber*) getWorkSheetHyperlinkWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     hyperlinkIndex:(NSNumber*) hyperlinkIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinkResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet hyperlink by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param hyperlinkIndex The hyperlink&#39;s index.
/// @param hyperlink Hyperlink object
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPHyperlinkResponse*
-(NSNumber*) postWorkSheetHyperlinkWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     hyperlinkIndex:(NSNumber*) hyperlinkIndex 
     hyperlink:(ASPHyperlink*) hyperlink 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPHyperlinkResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet hyperlink by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param hyperlinkIndex The hyperlink&#39;s index.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorkSheetHyperlinkWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     hyperlinkIndex:(NSNumber*) hyperlinkIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet merged cells.
/// 
///
/// @param name Document name.
/// @param sheetName The workseet name.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPMergedCellsResponse*
-(NSNumber*) getWorkSheetMergedCellsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPMergedCellsResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet merged cell by its index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param mergedCellIndex Merged cell index.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPMergedCellResponse*
-(NSNumber*) getWorkSheetMergedCellWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     mergedCellIndex:(NSNumber*) mergedCellIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPMergedCellResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet OLE objects info.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPOleObjectsResponse*
-(NSNumber*) getWorksheetOleObjectsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPOleObjectsResponse* output, NSError* error))completionBlock;
    


///
///
/// Add OLE object
/// 
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param oleObject Ole Object
/// @param upperLeftRow Upper left row index
/// @param upperLeftColumn Upper left column index
/// @param height Height of oleObject, in unit of pixel
/// @param width Width of oleObject, in unit of pixel
/// @param oleFile OLE filename
/// @param imageFile Image filename
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPOleObjectResponse*
-(NSNumber*) putWorksheetOleObjectWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     oleObject:(ASPDrawingOleObject*) oleObject 
     upperLeftRow:(NSNumber*) upperLeftRow 
     upperLeftColumn:(NSNumber*) upperLeftColumn 
     height:(NSNumber*) height 
     width:(NSNumber*) width 
     oleFile:(NSString*) oleFile 
     imageFile:(NSString*) imageFile 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPOleObjectResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete all OLE objects.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetOleObjectsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get OLE object in specified format
///
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param objectNumber The object number.
/// @param format Ole object format
/// @param storage Workbook storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getWorksheetOleObjectWithFormatWithCompletionBlock :(NSString*) name
                                                       sheetName:(NSString*) sheetName
                                                    objectNumber:(NSNumber*) objectNumber
                                                          format:(NSString*) format
                                                         storage:(NSString*) storage
                                                          folder:(NSString*) folder 

                                               completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Get OLE object info.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param objectNumber The object number.
/// @param storage Workbook storage.
/// @param folder The document folder.
/// 
///
/// @return ASPSystemObject*
-(NSNumber*) getWorksheetOleObjectWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     objectNumber:(NSNumber*) objectNumber 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update OLE object.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param oleObjectIndex Ole object index
/// @param ole Ole Object
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postUpdateWorksheetOleObjectWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     oleObjectIndex:(NSNumber*) oleObjectIndex 
     ole:(ASPDrawingOleObject*) ole 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete OLE object.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param oleObjectIndex Ole object index
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetOleObjectWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     oleObjectIndex:(NSNumber*) oleObjectIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet pictures.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPPicturesResponse*
-(NSNumber*) getWorksheetPicturesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPicturesResponse* output, NSError* error))completionBlock;
    


///
///
/// Add a new worksheet picture.
///
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param picturePath The picture path
/// @param upperLeftRow The image upper left row.
/// @param upperLeftColumn The image upper left column.
/// @param lowerRightRow The image low right row.
/// @param lowerRightColumn The image low right column.
/// @param storage The workbook storage.
/// @param folder The workbook folder.
///
///
/// @return ASPPicturesResponse*
-(NSNumber*) putWorksheetAddPictureWithCompletionBlock :(NSString*) name
                                              sheetName:(NSString*) sheetName
                                            picturePath:(NSString*) picturePath
                                           upperLeftRow:(NSNumber*) upperLeftRow
                                        upperLeftColumn:(NSNumber*) upperLeftColumn
                                          lowerRightRow:(NSNumber*) lowerRightRow
                                       lowerRightColumn:(NSNumber*) lowerRightColumn
                                                storage:(NSString*) storage 
                                                 folder:(NSString*) folder 

                                      completionHandler: (void (^)(ASPPicturesResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete all pictures in worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorkSheetPicturesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet picture by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param pictureIndex The picture&#39;s index.
/// @param picture Picture object
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPPictureResponse*
-(NSNumber*) postWorkSheetPictureWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pictureIndex:(NSNumber*) pictureIndex 
     picture:(ASPDrawingPicture*) picture 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPictureResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete a picture object in worksheet
/// 
///
/// @param name The workbook name.
/// @param sheetName The worsheet name.
/// @param pictureIndex Picture index
/// @param storage The workbook storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetPictureWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pictureIndex:(NSNumber*) pictureIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// GRead worksheet picture by number.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param pictureNumber The picture number.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPPictureResponse*
-(NSNumber*) getWorksheetPictureWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pictureNumber:(NSNumber*) pictureNumber 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPictureResponse* output, NSError* error))completionBlock;
    


///
///
/// Read worksheet picture in specified format
///
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param pictureNumber The picture number.
/// @param format Picture format.
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getWorksheetPictureWithFormatWithCompletionBlock :(NSString*) name
                                                     sheetName:(NSString*) sheetName
                                                 pictureNumber:(NSNumber*) pictureNumber
                                                        format:(NSString*) format
                                                       storage:(NSString*) storage
                                                        folder:(NSString*) folder 

                                             completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Extract barcodes from worksheet picture.
/// 
///
/// @param name Workbook name.
/// @param sheetName Worksheet name.
/// @param pictureNumber Picture index.
/// @param storage Workbook storage.
/// @param folder Workbook folder.
/// 
///
/// @return ASPBarcodeResponseList*
-(NSNumber*) getExtractBarcodesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pictureNumber:(NSNumber*) pictureNumber 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBarcodeResponseList* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet pivottables info.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPPivotTablesResponse*
-(NSNumber*) getWorksheetPivotTablesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPivotTablesResponse* output, NSError* error))completionBlock;
    


///
///
/// Add a pivot table into worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param request CreatePivotTableRequest dto in request body.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// @param sourceData The data for the new PivotTable cache.
/// @param destCellName The cell in the upper-left corner of the PivotTable report&#39;s destination range.
/// @param tableName The name of the new PivotTable report.
/// @param useSameSource Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory.
/// 
///
/// @return ASPPivotTableResponse*
-(NSNumber*) putWorksheetPivotTableWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     request:(ASPCreatePivotTableRequest*) request 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     sourceData:(NSString*) sourceData 
     destCellName:(NSString*) destCellName 
     tableName:(NSString*) tableName 
     useSameSource:(NSNumber*) useSameSource 
    
    completionHandler: (void (^)(ASPPivotTableResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet pivot tables
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetPivotTablesWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet pivot table by index
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteWorksheetPivotTableWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Calculates pivottable's data to cells.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorksheetPivotTableCalculateWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update cell style for pivot table
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param column 
/// @param row 
/// @param style Style dto in request body.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postPivotTableCellStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     column:(NSNumber*) column 
     row:(NSNumber*) row 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Update style for pivot table
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param style Style dto in request body.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postPivotTableStyleWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     style:(ASPStyle*) style 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Add pivot field into into pivot table
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param pivotFieldType The fields area type.
/// @param request Dto that conrains field indexes
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putPivotTableFieldWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     pivotFieldType:(NSString*) pivotFieldType 
     request:(ASPPivotTableFieldRequest*) request 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete pivot field into into pivot table
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param pivotFieldType The fields area type.
/// @param request Dto that conrains field indexes
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deletePivotTableFieldWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     pivotFieldType:(NSString*) pivotFieldType 
     request:(ASPPivotTableFieldRequest*) request 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get pivot field into into pivot table
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivotTableIndex Pivot table index
/// @param pivotFieldIndex The field index in the base fields.
/// @param pivotFieldType The fields area type.
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPPivotFieldResponse*
-(NSNumber*) getPivotTableFieldWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivotTableIndex:(NSNumber*) pivotTableIndex 
     pivotFieldIndex:(NSNumber*) pivotFieldIndex 
     pivotFieldType:(NSString*) pivotFieldType 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPivotFieldResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet pivottable info by index.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param pivottableIndex 
/// @param storage Workbook storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPPivotTableResponse*
-(NSNumber*) getWorksheetPivotTableWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     pivottableIndex:(NSNumber*) pivottableIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPPivotTableResponse* output, NSError* error))completionBlock;
    


///
///
/// Move worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param moving {WorksheetMovingRequest} with moving parameters.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPWorksheetsResponse*
-(NSNumber*) postMoveWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     moving:(ASPWorksheetMovingRequest*) moving 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetsResponse* output, NSError* error))completionBlock;
    


///
///
/// Protect worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param protectParameter {ProtectSheetParameter} with protection settings.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPWorksheetResponse*
-(NSNumber*) putProtectWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     protectParameter:(ASPProtectSheetParameter*) protectParameter 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetResponse* output, NSError* error))completionBlock;
    


///
///
/// Unprotect worksheet.
/// 
///
/// @param name Document name.
/// @param sheetName The worksheet name.
/// @param protectParameter {WorksheetResponse} with protection settings. Only password is used here.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPWorksheetResponse*
-(NSNumber*) deleteUnprotectWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     protectParameter:(ASPProtectSheetParameter*) protectParameter 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetResponse* output, NSError* error))completionBlock;
    


///
///
/// Rename worksheet
/// 
///
/// @param name 
/// @param sheetName 
/// @param newname 
/// @param folder 
/// @param storage 
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postRenameWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     newname:(NSString*) newname 
     folder:(NSString*) folder 
     storage:(NSString*) storage 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Replace text.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param oldValue The old text to replace.
/// @param newValue The new text to replace by.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPWorksheetReplaceResponse*
-(NSNumber*) postWorsheetTextReplaceWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     oldValue:(NSString*) oldValue 
     newValue:(NSString*) newValue 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetReplaceResponse* output, NSError* error))completionBlock;
    


///
///
/// Sort worksheet range.
/// 
///
/// @param name The workbook name.
/// @param sheetName The worksheet name.
/// @param cellArea The range to sort.
/// @param dataSorter {DataSorter} with sorting settings.
/// @param storage The document storage.
/// @param folder The workbook folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postWorksheetRangeSortWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     cellArea:(NSString*) cellArea 
     dataSorter:(ASPDataSorter*) dataSorter 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet text items.
/// 
///
/// @param name Workbook name.
/// @param sheetName The worksheet name.
/// @param storage The document storage.
/// @param folder The workbook&#39;s folder.
/// 
///
/// @return ASPTextItemsResponse*
-(NSNumber*) getWorkSheetTextItemsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTextItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet validations.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param storage The document storage.
/// @param folder Document folder.
/// 
///
/// @return ASPValidationsResponse*
-(NSNumber*) getWorkSheetValidationsWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPValidationsResponse* output, NSError* error))completionBlock;
    


///
///
/// Add worksheet validation at index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param range Specified cells area
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPValidationResponse*
-(NSNumber*) putWorkSheetValidationWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     range:(NSString*) range 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPValidationResponse* output, NSError* error))completionBlock;
    


///
///
/// Get worksheet validation by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param validationIndex The validation index.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPValidationResponse*
-(NSNumber*) getWorkSheetValidationWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     validationIndex:(NSNumber*) validationIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPValidationResponse* output, NSError* error))completionBlock;
    


///
///
/// Update worksheet validation by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param validationIndex The validation index.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPValidationResponse*
-(NSNumber*) postWorkSheetValidationWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     validationIndex:(NSNumber*) validationIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPValidationResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete worksheet validation by index.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param validationIndex The validation index.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPValidationResponse*
-(NSNumber*) deleteWorkSheetValidationWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     validationIndex:(NSNumber*) validationIndex 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPValidationResponse* output, NSError* error))completionBlock;
    


///
///
/// Change worksheet visibility.
/// 
///
/// @param name Document name.
/// @param sheetName Worksheet name.
/// @param isVisible New worksheet visibility value.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPWorksheetResponse*
-(NSNumber*) putChangeVisibilityWorksheetWithCompletionBlock :(NSString*) name 
     sheetName:(NSString*) sheetName 
     isVisible:(NSNumber*) isVisible 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWorksheetResponse* output, NSError* error))completionBlock;
    


///
///
/// Protect document from changes.
/// 
///
/// @param name Document name.
/// @param password Modification password.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putDocumentProtectFromChangesWithCompletionBlock :(NSString*) name 
     password:(ASPPasswordRequest*) password 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Unprotect document from changes.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder Document&#39;s folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteDocumentUnProtectFromChangesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    



@end
